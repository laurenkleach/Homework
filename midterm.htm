<!DOCTYPE html>
<!-- saved from url=(0056)http://mc.local/ca276-2013-01/samples/midterm/index.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<meta charset="UTF-8">
	<title>midterm</title>
	<!-- Commenting these out since they are throwing errors in the console -->
	<!-- <link rel="stylesheet" type="text/css" href="./midterm-files/bootstrap.min.css"> -->
	<!-- <link rel="stylesheet" type="text/css" href="./midterm-files/styles.css"> -->
</head>
<body>
	<section class="container">
		<section class="row">
			<h1>CA 276 Mid-Term</h1>
		</section>
		<section class="row">
			<article class="span4">
				<section>
					<h2>Variables</h2>
					<p>Create variables to contain the following. Initialize the variables with sample data. Use the most appropriate data type.</p>
					<ol>
						<li>The name of this course</li>
						<li>Number of days in March</li>
						<li>Do you know JavaScript?</li>
						<li>A list of the best restaurants in Rockville</li>
						<li>Expected annual salary of a Web developer</li>
					</ol>
				</section>
			</article>
			<article class="span4">
				<section>
					<h2>Math</h2>
					<p>Write the following math operations using JavaScript. Do not hard-code the result. Send the results to the console.</p>
					<ol>
						<li>The price of a $20 drink plus 25% sales tax</li>
						<li>The cost of a $400 smartphone after a 15% discount</li>
						<li>The cost of four $5 sub sandwiches</li>
						<li>The cost of a $75 dinner split evenly among 5 people</li>
						<li>0.1 multiplied by 0.2. Bonus: Round the result to two decimal places.</li>
					</ol>
				</section>
			</article>
			<article class="span4">
				<section>
					<h2>Conditional logic</h2>
					<p>Write the following either as a <code>switch</code> statement or combination of <code>if/else</code> blocks.</p>
					<ol>
						<li>If your editor is “Eclipse” then send “Java developer” to the console.</li>
						<li>If your editor is “Aptana Studio” then send “Web developer” to the console.</li>
						<li>If your editor is “Sublime Text” then send “I am awesome” to the console.</li>
						<li>If your editor is “Notepad” then send “Wrong editor” to the console.</li>
					</ol>
				</section>
			</article>
		</section>
		<section class="row">
			<article class="span4">
				<section>
					<h2>Loops</h2>
					<p>Write a loop that iterates the numbers from 5 to 15. You can write this as a <code>for</code> or a <code>while</code> loop. Each loop iteration should send the value of <code>i</code> to the console.</p>
				</section>
			</article>
			<article class="span4">
				<section>
					<h2>Functions</h2>
					<p>Write a function <code>average</code> that takes three arguments: <code>num1</code>, <code>num2</code>, <code>num3</code>. The function will return (i.e. do not use console.log) the average of the three arguments. To get the average you will add them together and divide the total by three.</p>
					<p>Bonus: Write code that ensures all three arguments are of type <em>number</em>. If any of the three are not numbers have the function return <code>NaN</code> (NaN is a reserved value in JavaScript, so don't put it inside single quotes).</p>
				</section>
			</article>
			<article class="span4">
				<section>
					<h2>Question</h2>
					<p>What is the hardest part about learning JavaScript?</p>
				</section>
			</article>
		</section>
	</section>

	<!-- Your answers go here -->
	<script>

		// Problem 1

		var courseName = "CA272";

		var daysInMarch = 31; 

		var knowJavascript = true;

		var bestRockvilleRestaurants = ["Chili\'s", "TGIF", "Silver Diner"];

		//JG: I'd personally go with a number type, but I can see why you chose a string.
		// var expectedSalary = "$62,228";
		var expectedSalary = 62228;

		
		// Problem 2

		var drinkPrice = 20 * 1.25;

		var costSmartphone = 400 * 0.85;

		var subSandwhichCost = 5 * 4;

		var dinnerSplit = 75 / 5; 

		var productNumber = 0.1 * 0.2;

		var productRounded = productNumber.toFixed(2);

		console.log(drinkPrice, costSmartphone, subSandwhichCost, dinnerSplit, productRounded);

		// Problem 3
		var editor = 'Sublime';
		//JG: In JavaScript it's preferrable to have curly brackets start on the right

		if (editor === 'Eclipse') {
			console.log("Java developer");
		} else if (editor === 'Aptana Studio') {
			console.log("Web developer");
		} else if (editor === 'Sublime') {
			console.log("I am awesome");
		} else if (editor === 'Notepad') {
			console.log("Wrong editor");
		}

		//JG: Here's an example where having curly brackets on the left can hurt you

		function createShape(name, width, height) {
			// Return a JavaScript object
			//JG: What happens if you align the curly brackets vertically in the return statement below?
			return {
					'name': name,
					'width': width,
					'height': height
				};
		}

		// //JG: What does the console return?
		console.log('Create shape test:', createShape('square', 10, 5));

		// Problem 4
		var i; 

		for (i = 5; i < 16; i++) {
			console.log(i);
		};


		// Problem 5
		
		var myAverage = function average(num1, num2, num3) {
			var value = 0;

			if (typeof num2 !== "number" || typeof num2 !== "number" || typeof num3 !== "number") {
				
				//JG: NaN is a built-in value so no single quotes are needed
				value = NaN;
				
				return value;
			}

			value = (num1 + num2 + num3) / 3;

			return value;
		};
		


		// Problem 6
		//The hardest part about learning JavaScript would probably be understanding passing and returning arguments, in complicated situations, such as functions within functions or passing functions in functions. Sometimes it can become so complicated in trying to understand where a value is being returned to, or what the scope of the value you are trying to return is. I can normally understand if I take it step by step. but it can be very time-consuming doing so. Also, when there is a minor syntax error, and not obviously an error, it can be difficult trying to determine why or where the error is occuring. Other than this, so far I find that I understand most of the Javascript we have learned so far, and I find it to be very logical and straightfoward. 

		//JG: Closures are a beast for sure. Understanding them is somewhat critical these days since jQuery relies so heavily on them. I've even noticed some other languages start to adopt the closure concept (e.g. passing functions as arguments to other functions) because they are so powerful. JavaScript is quite unique in this aspect. One thing that may help in understanding them is to write code with nested functions. In other words, an outer function, an inner function, and an inner inner function. Scope variables to each of the functions and use console.log statements to see what's going on.

		//JG: Debugging is a bit of an art. The console.log statement is helpful for determining where code is breaking. You can also use the debugger statement to stop code dead in its tracks. You can resume when you have confirmed that you want the code to keep running.

		// debugger;

		//JG: This podcast episode helped me get more acquainted with debugging in Firefox, Chrome, Safari, and Opera. Sadly, it does a feel a bit dated now (Firefox 3.6!), but it may be somewhat useful.
		// http://jqueryfordesigners.com/debugging-tools/

	</script>

</body>
</html>